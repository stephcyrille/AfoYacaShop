{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["items","id","title","slug","pictures","App","state","Array","keys","hasOverflow","canScrollLeft","canScrollRight","dialogOpen","product","quantity","value","error","errorMessage","success","checkForOverflow","bind","checkForScrollPosition","debounceCheckForOverflow","debounce","debounceCheckForScrollPosition","container","this","addEventListener","removeEventListener","cancel","prevProps","prevState","length","scrollLeft","scrollWidth","clientWidth","setState","distance","scrollBy","left","behavior","props","products","map","val","key","className","href","src","style","marginBottom","onClick","handleSetDialogOpen","marginLeft","marginRight","scrollContainerBy","event","element","preventDefault","e","target","window","location","buildControls","ref","node","buildItems","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c0510b1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, TextField, Paper } from \"@material-ui/core\";\nimport Grow from '@material-ui/core/Grow';\nimport debounce from 'lodash.debounce'\nimport './App.css';\n\n\nconst items = [\n  {id: 1, title: \"Product1\", slug: \"product1\", pictures: ['/static/images/robe.jpg']},\n  {id: 1, title: \"Product2\", slug: \"product2\", pictures: ['/static/images/robe.jpg']},\n  {id: 1, title: \"Product3\", slug: \"product3\", pictures: ['/static/images/robe.jpg']},\n  {id: 1, title: \"Product4\", slug: \"product4\", pictures: ['/static/images/robe.jpg']},\n  {id: 1, title: \"Product5\", slug: \"product5\", pictures: ['/static/images/robe.jpg']},\n  {id: 1, title: \"Product6\", slug: \"product6\", pictures: ['/static/images/robe.jpg']}\n]\n\n\nexport default\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      items: [...Array(10).keys()],\n      hasOverflow: false,\n      canScrollLeft: false,\n      canScrollRight: false,\n\n      dialogOpen: false,\n      product: null,\n      quantity: {\n        value: 0,\n        error: false,\n        errorMessage: null,\n      },\n      // Toggle when adding on cart is a success\n      success: false\n    }\n\n    this.checkForOverflow = this.checkForOverflow.bind(this)\n    this.checkForScrollPosition = this.checkForScrollPosition.bind(this)\n\n    this.debounceCheckForOverflow = debounce(this.checkForOverflow, 1000)\n    this.debounceCheckForScrollPosition = debounce(\n      this.checkForScrollPosition,\n      200\n    )\n\n    this.container = null\n  }\n\n  componentDidMount() {\n    this.checkForOverflow()\n    this.checkForScrollPosition()\n\n    this.container.addEventListener(\n      'scroll',\n      this.debounceCheckForScrollPosition\n    )\n  }\n\n  componentWillUnmount() {\n    this.container.removeEventListener(\n      'scroll',\n      this.debounceCheckForScrollPosition\n    )\n    this.debounceCheckForOverflow.cancel()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.items.length !== this.state.items.length) {\n      this.checkForOverflow()\n      this.checkForScrollPosition()\n    }\n  }\n\n  checkForScrollPosition() {\n    const { scrollLeft, scrollWidth, clientWidth } = this.container\n\n    this.setState({\n      canScrollLeft: scrollLeft > 0,\n      canScrollRight: scrollLeft !== scrollWidth - clientWidth\n    })\n  }\n\n  checkForOverflow() {\n    const { scrollWidth, clientWidth } = this.container\n    const hasOverflow = scrollWidth > clientWidth\n\n    this.setState({ hasOverflow })\n  }\n\n  scrollContainerBy(distance) {\n    this.container.scrollBy({ left: distance, behavior: 'smooth' })\n  }\n\n  buildItems() {\n    var products = this.props.products ? this.props.products : items\n\n    return products.map((val, key) => {\n      return (\n        <li className=\"item\" key={key}>\n          <div className='showcase-whole-content'>\n            <div className='showcase-pic-wrapper'>\n              <a href={`/shop/products/${val.slug}`}>\n                <img src={`${val.pictures[0]}`} className='' />\n              </a>\n            </div>\n            <div className='showcase-pic-legend'>\n              <h4 style={{ marginBottom: 5 }}>{val.title}</h4>\n              <p>\n                {/* The call list of products in the specific place */}\n                <a href=\"\" className=\"horizontal_scroll_country\">Cameroun</a><br />\n                <a href=\"#\" className=\"horizontal_scroll_add_to_cart\" onClick={ this.handleSetDialogOpen.bind(this, val)}>Ajouter au panier</a>\n              </p>\n            </div>\n          </div>\n        </li>\n      )\n    })\n  }\n\n  buildControls() {\n    return (\n      <div className=\"row\" style={{ marginLeft: 0, marginRight: 0 }}>\n\n          <div className=\"col-6\">\n            { this.props.title && (\n              <h4 className=\"flash_sale\">Ventes flash</h4>)\n            }\n          </div>\n\n\n        <div className=\"col-6 item-controls\">\n          <i className=\"fa fa-chevron-left fa-2x chevron-lft\"\n            onClick={() => {\n              this.scrollContainerBy(-200)\n            }}\n          ></i>\n\n\n          <i className=\"fa fa-chevron-right fa-2x chevron-rgt\"\n            onClick={() => {\n              this.scrollContainerBy(200)\n            }}\n          ></i>\n        </div>\n      </div>\n    )\n  }\n\n  handleSetDialogOpen(event, element){\n    event.preventDefault()\n    this.setState({\n      dialogOpen: true,\n      product: element\n    })\n  }\n\n  handleSetDialogClose(){\n    this.setState({\n      dialogOpen: false,\n      product: null,\n      success: false,\n      quantity: {\n        value: 0,\n        error: false,\n        errorMessage: null,\n      }\n    })\n  }\n\n  handleChangeQuantity(e){\n    this.setState({\n      quantity: e.target.value,\n    })\n  }\n\n  handleSubmit(e){\n    e.preventDefault()\n    this.setState({\n      quantity: e.target.quantity.value,\n      success: true\n    })\n  }\n\n  handleGotoCart(){\n    window.location.href = `/`;\n  }\n\n\n  render() {\n    const { success, dialogOpen, quantity } = this.state\n\n    return (\n      <div className=\"scroll-body\">\n        <div className=\"scroll-wrapper\">\n          {this.buildControls()}\n          <ul\n            className=\"item-container\"\n            ref={node => {\n              this.container = node\n            }}\n          >\n            {this.buildItems()}\n          </ul>\n        </div>\n\n\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('horizontalScroll')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}